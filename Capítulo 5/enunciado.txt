Realizar una aplicación siguiendo el patrón de diseño MVC que permita la edición de un texto (simple). El programa debe funcionar con tres idiomas (español, catalán e inglés). Antes de hacer nada debe detectar el idioma predominante en el texto. Luego cuando se le dé orden de detección, debe identificar el idioma y marcar aquellas palabras léxicamente incorrectas.
Cuando se le dé la orden de corrección, el programa debe efectuar una corrección, donde el proceso irá proponiendo palabras y el usuario podrá confirmarlas. Debe basarse en la solución aportada por la Programación Dinámica para el problema de la distancia de edición. El programa se apoyará con diccionarios en UTF8 de los idiomas español, catalán e inglés. En esta tarea se puede encontrar un enlace en el archivo con la lista de la mayoría de vocablos del idioma español. El archivo de vocablos está en formato UTF-8 sin BOM.

No es necesario realizar la aplicación interactiva. Si la aplicación no es interactiva, simplemente el programa irá marcando las palabras incorrectas en la zona de edición del GUI como consecuencia de un comando del usuario y después, a otro comando del usuario se hará la corrección. Sólo es obligatorio corregir por el primer candidato que aporte Levenstein. Quedando como opcional la elección entre la lista de candidatos.

Voluntario para la convocatoria ordinaria y obligatorio para la de julio: Aplicación interactiva: el usuario irá escribiendo en un editor de texto y otro hilo de ejecución (por detrás) irá marcando las palabras erróneas, para posteriormente (cuando pueda o en orden de un botón o el ratón) ir corrigiendo las palabras según la lista de las propuestas (hilos concurrentes).

Como aportaciones optativas a la práctica, en las dos convocatorias, se puede considerar una función de criterios a la hora de proponer la lista de palabras, así como probar diferentes soluciones algorítmicas de acuerdo con las diferentes funciones de distancia que se escojan ( por ejemplo, nuevas operaciones, dar mayor valor a un cambio que a una inserción, etc.). Para desarrollar distintos enfoques de la solución puede ser muy útil el DOO. Java puede optar por utilizar la estructura enriquecida de JTextPane, Style y StileContext. Ejemplo: Central.java.

Para la gente que esté algo ahogada, tiene la posibilidad de hacer una versión reducida que como máximo, si el resto es perfecto, se puntuará, como máximo, con un 5 sobre 10. Esta versión bastará que permita escoger un archivo de texto del disco, que identifique el idioma de los tres que se asemeja más, y que el ordenador saque un listado de palabras incorrectas y proponga para cada una de ellas una lista de palabras candidatas.

Fecha límite: 29 de mayo.